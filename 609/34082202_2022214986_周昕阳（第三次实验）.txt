**********************************
3.4 面向过程实现打飞机小游戏
**********************************
//调试通过的可运行程序源代码

**********************************
//Fighter.java

package FlyMe2TheMoon2;

import java.util.ArrayList;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JLabel;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import java.util.Timer;
import java.util.TimerTask;

/**
 * The Fighter class of the FlyMe2TheMoon.
 * 
 * @author Xinyang Zhou
 * @version 2.0
 */
public class Fighter implements KeyListener {

    private int height, width;// 游戏界面尺寸
    private int fighter_x, fighter_y;// 飞机位置
    private ArrayList<Integer> bullets_x;
    private ArrayList<Integer> bullets_y;
    private ArrayList<Integer> enemys_x;
    private ArrayList<Integer> enemys_y;
    private int score;// 分数
    private int HP;// 生命值

    /**
     * 构造打飞机游戏类
     */
    public Fighter() {
        score = 0;// 0分
        HP = 5;// 5点生命值

        // 游戏界面尺寸
        height = 24;
        width = 30;

        // 飞机位置
        fighter_x = height - 5;
        fighter_y = width / 2;

        // 实例子弹数组类
        bullets_x = new ArrayList<Integer>();
        bullets_y = new ArrayList<Integer>();
        bullets_x.add(fighter_x - 2);
        bullets_y.add(fighter_y);

        // 创建一个敌机
        enemys_x = new ArrayList<Integer>();
        enemys_y = new ArrayList<Integer>();
        createEnemy();

    }

    /**
     * 画游戏图像
     */
    public void drawPicture() {
        for (int x = 0; x < height + 2; x++) {
            for (int y = 0; y < width + 2; y++) {
                boolean printed = false;

                // 输出边框
                if (y == 0 || y == width + 1) {
                    System.out.print("|");
                    printed = true;
                }

                // 画出飞机
                if (!printed && x == fighter_x
                        && (y >= fighter_y - 2 && y <= fighter_y + 2)) {
                    System.out.print("#");
                    printed = true;
                } else if (!printed && x == fighter_x - 1 && y == fighter_y) {
                    System.out.print("A");
                    printed = true;
                } else if (!printed && x == fighter_x + 1
                        && (y == fighter_y - 1 || y == fighter_y + 1)) {
                    System.out.print("I");
                    printed = true;
                }

                // 画出子弹
                for (int i = 0; i < bullets_x.size(); i++) {
                    if (!printed && x == bullets_x.get(i) && y == bullets_y.get(i)) {
                        System.out.print("*");
                        printed = true;
                        break;
                    }
                }

                // 画出敌机
                for (int i = 0; i < enemys_x.size(); i++) {
                    if (!printed && x == enemys_x.get(i) && y == enemys_y.get(i)) {
                        System.out.print("V");
                        printed = true;
                        break;
                    }
                }

                // 输出空格
                if (!printed) {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
        System.out.println(
                "|                              |分数：" + score + " | HP: " + HP);

    }

    /**
     * 控制飞机移动
     */
    public void operateFighter() {
        // 创建一个 飞机操纵台
        JFrame frame = new JFrame("飞机操纵台");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 100);// 大小
        frame.setVisible(true);// 可见
        frame.setResizable(false);// 不可改变大小
        JLabel tips = new JLabel("上下左右箭头移动，空格发射超级子弹", null, 0);// 提示
        frame.add(tips);

        frame.setFocusable(true);
        frame.requestFocusInWindow();// 将焦点设置到 frame 上
        frame.addKeyListener(this);// 添加 KeyListener 到 frame,keyPressed实现飞机运动
    }

    @Override
    public void keyPressed(KeyEvent e) {
        // 当按键被按下时触发
        // 处理按键事件
        int keyCode = e.getKeyCode();
        switch (keyCode) {
            case 38: {// 上键
                if (fighter_x > 2) {
                    fighter_x--;
                }
                break;
            }
            case 37: {// 左键
                if (fighter_y > 3) {
                    fighter_y--;
                }
                break;
            }
            case 40: {// 下键
                if (fighter_x < height - 1) {
                    fighter_x++;
                }
                break;
            }
            case 39: {// 右键
                if (fighter_y < width - 2) {
                    fighter_y++;
                }
                break;
            }
            case 32: {// " "
                bullets_x.add(fighter_x - 1);
                bullets_y.add(fighter_y);
                break;
            }
            case 27: {
                System.out.println("游戏结束！");
                System.exit(0); // 按下 ESC 键退出程序
                break;
            }
        }
        ifSurvive();// 飞机是否存活
        drawPicture();
    }

    /**
     * 子弹与飞机移动
     */
    public void pcOperate() {
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                createEnemy();// 创造敌机
                createBullet();// 创造子弹
                floatBullet();// 子弹移动
                ifEnemySurvive();// 敌机是否存活
                enemyFighterMove();// 敌机移动
                ifSurvive();// 飞机是否存活
                ifEnemySurvive();// 敌机是否存活
            }
        }, 0, 500);

        timer.scheduleAtFixedRate(new TimerTask() {// 更新图像
            @Override
            public void run() {
                drawPicture();
            }
        }, 0, 2000);
    }

    /**
     * 子弹移动
     */
    public void floatBullet() {

        for (int i = 0; i < bullets_x.size(); i++) {
            bullets_x.set(i, bullets_x.get(i) - 1);
            if (bullets_x.get(i) < 0) {
                bullets_x.remove(i);// 移除子弹
                bullets_y.remove(i);
                if (i != 0) {
                    i--;
                }
            }
        }
    }

    /**
     * 敌机移动
     */
    public void enemyFighterMove() {
        for (int i = 0; i < enemys_x.size(); i++) {
            enemys_x.set(i, enemys_x.get(i) + 1);
            if (enemys_x.get(i) > height) {
                enemys_x.remove(i);// 移除飞机
                enemys_y.remove(i);
                if (i != 0) {
                    i--;
                }
            }
        }
    }

    /**
     * 判断飞机是否存活
     */
    public void ifSurvive() {
        // 飞机被击中
        for (int i = 0; i < enemys_x.size(); i++) {
            if ((enemys_x.get(i) == fighter_x - 1 && enemys_y.get(i) == fighter_y)
                    || (enemys_x.get(i) == fighter_x && enemys_x.get(i) > fighter_y - 3
                            && enemys_x.get(i) < fighter_y + 3)) {
                enemys_x.remove(i);// 移除敌机
                enemys_y.remove(i);
                if (i != 0) {
                    i--;
                }
                // 刷新飞机位置
                fighter_x = height - 5;
                fighter_y = width / 2;
                HP--;// 减少生命值
                if (HP == 0) {
                    System.out.println("***飞机被摧毁，游戏结束！***");
                    System.exit(0);
                }
            }
        }
    }

    /**
     * 判断敌机是否存活
     */
    public void ifEnemySurvive() {
        for (int i = 0; i < enemys_x.size(); i++) {
            for (int j = 0; j < bullets_x.size(); j++) {
                if (bullets_x.get(j) == enemys_x.get(i) && bullets_y.get(j) == enemys_y.get(i)) {
                    score++;// 加分
                    bullets_x.remove(j);// 移除子弹
                    bullets_y.remove(j);
                    if (j != 0) {
                        j--;
                    }
                    enemys_x.remove(i);// 移除飞机
                    enemys_y.remove(i);
                    if (i != 0) {
                        i--;
                    }
                }
            }
        }
    }

    /**
     * 创造敌机
     */
    public void createEnemy() {
        Random random = new Random();
        enemys_x.add(0);
        enemys_y.add(random.nextInt(width - 4) + 3);
    }

    /**
     * 创造子弹
     */
    public void createBullet() {
        bullets_x.add(fighter_x - 1);
        bullets_y.add(fighter_y);
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }
}

**********************************
//mainFighter.java

package FlyMe2TheMoon2;

/**
 * main of FlyMe2TheMoon
 * 
 * @author xinyang Zhou
 * @version 2.0
 */
public class mainFighter {
    /**
     * main函数（主模块）
     * 
     * @param args A reference to a string array containing command-line arguments
     */
    public static void main(String[] args) {
        System.out.println("这里是打飞机小游戏~~");
        // 实例打飞机类
        Fighter FlyMe2TheMoon = new Fighter();
        // 画出初始的图像
        FlyMe2TheMoon.drawPicture();
        // 飞机操作台运作
        FlyMe2TheMoon.operateFighter();
        // 子弹与飞机移动
        FlyMe2TheMoon.pcOperate();
    }
}
