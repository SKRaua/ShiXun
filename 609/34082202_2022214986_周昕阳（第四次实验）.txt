********************************************************************
3.4 面向过程实现打飞机小游戏
********************************************************************
//调试通过的可运行程序源代码

********************************************************************
//Picture.java

package FlyMe2TheMoon4;

import java.util.ArrayList;

/**
 * The Picture class of the FlyMe2TheMoon.
 * 
 * @author Xinyang Zhou
 * @version 4.0
 */
public class Picture {

    private int height, width;// 游戏界面尺寸
    private int x, y;// 界面坐标，继承给子类用于定位图像

    /**
     * 构造游戏图像框架数据
     */
    public Picture() {
        // 游戏界面尺寸
        height = 24;
        width = 30;

    }

    /**
     * @return 游戏高
     */
    public int heightGetter() {
        return height;
    }

    /**
     * @return 游戏宽
     */
    public int widthGetter() {
        return width;
    }

    /**
     * 设置x坐标
     * 
     * @param x x坐标
     */
    public void setX(int x) {
        this.x = x;
    }

    /**
     * 设置y坐标
     * 
     * @param y y坐标
     */
    public void setY(int y) {
        this.y = y;
    }

    /**
     * @return x坐标
     */
    public int getX() {
        return x;
    }

    /**
     * @return y坐标
     */
    public int getY() {
        return y;
    }

    /**
     * 画图像
     * 
     * @param fighter       飞机
     * @param bullets       子弹
     * @param enemyFighters 敌机
     * @param score         分数
     */
    public void drawer(Fighter fighter, ArrayList<Bullet> bullets,
            ArrayList<EnemyFighter> enemyFighters, ArrayList<Boss> bosses) {
        String SuperBullet;
        if (fighter.getsuperBullet()) {
            SuperBullet = "Ready";// 超级子弹已装填
        } else {
            SuperBullet = "Not Ready";
        }
        for (int x = 0; x < height + 2; x++) {
            for (int y = 0; y < width + 2; y++) {
                boolean printed = false;

                // 输出边框
                if (y == 0 || y == width + 1) {
                    System.out.print("|");
                    printed = true;
                }

                // 画出飞机
                if (!printed && x == fighter.getX()
                        && (y >= fighter.getY() - 2 && y <= fighter.getY() + 2)) {
                    System.out.print("#");
                    printed = true;
                } else if (!printed && x == fighter.getX() - 1 && y == fighter.getY()) {
                    System.out.print("A");
                    printed = true;
                } else if (!printed && x == fighter.getX() + 1
                        && (y == fighter.getY() - 1 || y == fighter.getY() + 1)) {
                    System.out.print("I");
                    printed = true;
                }

                // 画出Boss
                for (Boss boss : bosses) {
                    if (!printed && x == boss.getX() && y == boss.getY()) {
                        System.out.print("V");
                        printed = true;
                        break;
                    } else if (!printed && x == boss.getX() - 1 && y > boss.getY() - 2 && y < boss.getY() + 2) {
                        System.out.print("=");
                        printed = true;
                        break;
                    }
                }

                // 画出子弹
                for (Bullet bullet : bullets) {
                    if (!printed && x == bullet.getX() && y == bullet.getY()) {
                        System.out.print("*");
                        printed = true;
                        break;
                    }
                }

                // 画出敌机
                for (EnemyFighter enemyFighter : enemyFighters) {
                    if (!printed && x == enemyFighter.getX() && y == enemyFighter.getY()) {
                        System.out.print("V");
                        printed = true;
                        break;
                    }
                }

                // 输出空格
                if (!printed) {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
        System.out.println(
                "|                              |分数：" + fighter.getScore() + " | HP: " + fighter.getHP()
                        + " | Super Bullet: " + SuperBullet);
    }

    public void win() {
        System.out.println("            *******            ");
        System.out.println("         *************         ");
        System.out.println("      *******************      ");
        System.out.println("     *********************     ");
        System.out.println("    ***********************    ");
        System.out.println("    Fly Me 2 The Moon ~~~~~    ");
        System.out.println("    ***********************    ");
        System.out.println("     *********************     ");
        System.out.println("      *******************      ");
        System.out.println("         *************         ");
        System.out.println("            *******            ");
        System.exit(0);

    }
}

********************************************************************
//Fighter.java

package FlyMe2TheMoon4;

/**
 * The Fighter class of the FlyMe2TheMoon.
 * 
 * @author Xinyang Zhou
 * @version 4.0
 */
public class Fighter extends Picture {

    private int HP;// 飞机生命值
    private int score;// 分数
    private boolean superBullet;// 超级子弹是否装填

    /**
     * 构造Fighter
     */
    public Fighter() {
        createFighter();
        HP = 5;// 初始生命值为5
        score = 0;// 初始分数为0
    }

    /**
     * 设置飞机HP
     * 
     * @param HP 飞机HP
     */
    public void setHP(int HP) {
        this.HP = HP;
    }

    /**
     * 设置分数
     * 
     * @param score 分数
     */
    public void setScore(int score) {
        this.score = score;
    }

    /**
     * 设置超级子弹
     * 
     * @param superBullet 导弹是否装填
     */
    public void setsuperBullet(boolean superBullet) {
        this.superBullet = superBullet;
    }

    /**
     * @return 飞机HP
     */
    public int getHP() {
        return HP;
    }

    /**
     * @return 得分
     */
    public int getScore() {
        return score;
    }

    /**
     * @return 是否装填super子弹
     */
    public boolean getsuperBullet() {
        return superBullet;
    }

    /**
     * 创造飞机（刷新飞机位置）
     */
    public void createFighter() {
        // 飞机位置
        super.setX(super.heightGetter() - 5);
        super.setY(super.widthGetter() / 2);
        superBullet = true;// 装填超级子弹
    }
}

********************************************************************
//Bullet.java

package FlyMe2TheMoon4;

/**
 * The Bullet class of the FlyMe2TheMoon.
 * 
 * @author Xinyang Zhou
 * @version 4.0
 */
public class Bullet extends Picture {

    /**
     * 子弹构造器
     */
    public Bullet(int fighter_x, int fighter_y) {
        // 创造一个子弹
        setX(fighter_x - 2);
        setY(fighter_y);
    }

    /**
     * 子弹移动
     */
    public void floatBullet() {
        setX(getX() - 1);// 子弹移动
    }
}

********************************************************************
//EnemyFighter.java

package FlyMe2TheMoon4;

import java.util.Random;

/**
 * The EnemyFighter class of the FlyMe2TheMoon.
 * 
 * @author Xinyang Zhou
 * @version 4.0
 */
public class EnemyFighter extends Picture {

    /**
     * 敌机构造器
     */
    public EnemyFighter() {
        createEnemyFighter();
    }

    public void enemyFighterMove() {
        setX(getX() + 1); // 敌机移动
    }

    /**
     * 创造敌机（刷新敌机位置）
     */
    public void createEnemyFighter() {
        Random random = new Random();
        // 产生新敌机
        setX(0);
        setY((random.nextInt(super.widthGetter() - 4) + 3));// 宽度限制敌机出现位置
    }
}

********************************************************************
//Boss.java

package FlyMe2TheMoon4;

/**
 * The Boss class of the FlyMe2TheMoon.
 * 
 * @author Xinyang Zhou
 * @version 4.0
 */
public class Boss extends EnemyFighter {
    private int HP;

    /**
     * 创造boss（刷新敌机位置）
     */
    public Boss() {
        super();
        HP = 10;
    }

    /**
     * 扣血
     */
    public void lossHP() {
        HP--;
    }

    /**
     * @return BossHP
     */
    public int getHP() {
        return HP;
    }
}

********************************************************************
//Operate.java

package FlyMe2TheMoon4;

import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JLabel;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import java.util.Timer;
import java.util.TimerTask;

/**
 * The Operate class of the FlyMe2TheMoon.（控制程序）
 * 
 * @author Xinyang Zhou
 * @version 4.0
 */
public class Operate implements KeyListener {
    private Fighter fighter;// 飞机
    private ArrayList<Bullet> bullets;// 子弹
    private ArrayList<EnemyFighter> enemyFighters;// 敌机
    private ArrayList<Boss> bosses;// Boss

    public Operate() {
        fighter = new Fighter();// 实例飞机类
        enemyFighters = new ArrayList<EnemyFighter>();// 实例敌机类
        bullets = new ArrayList<Bullet>();// 实例子弹类
        bosses = new ArrayList<Boss>();
        fighter.drawer(fighter, bullets, enemyFighters, bosses); // 打印初始图像
    }

    /**
     * 控制飞机移动
     */
    public void operateFighter() {
        // 创建一个 飞机操纵台
        JFrame frame = new JFrame("飞机操纵台");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 100);// 大小
        frame.setVisible(true);// 可见
        frame.setResizable(false);// 不可改变大小
        JLabel tips = new JLabel("WASD移动，空格发射超级子弹", null, 0);// 提示
        frame.add(tips);

        frame.setFocusable(true);
        frame.requestFocusInWindow();// 将焦点设置到 frame 上
        frame.addKeyListener(this);// 添加 KeyListener 到 frame,keyPressed实现飞机运动
    }

    @Override
    public void keyPressed(KeyEvent e) {
        // 当按键被按下时触发, 处理按键事件,操纵飞机
        int keyCode = e.getKeyCode();
        switch (keyCode) {
            case 87: {// W 上
                if (fighter.getX() > 2) {
                    fighter.setX(fighter.getX() - 1);
                }
                break;
            }
            case 65: {// A 左
                if (fighter.getY() > 3) {
                    fighter.setY(fighter.getY() - 1);
                }
                break;
            }
            case 83: {// S 下
                if (fighter.getX() < fighter.heightGetter() - 1) {
                    fighter.setX(fighter.getX() + 1);
                }
                break;
            }
            case 68: {// D 右
                if (fighter.getY() < fighter.widthGetter() - 2) {
                    fighter.setY(fighter.getY() + 1);
                }
                break;
            }
            case 32: {// " " 空格发射super子弹
                if (fighter.getsuperBullet()) {
                    for (int x = 0; x < 4; x++) {
                        for (int y = 0; y < 3; y++) {
                            bullets.add(new Bullet(fighter.getX() - x, fighter.getY() + y - 1));
                        }
                    }
                    fighter.setsuperBullet(false);// super子弹进入冷却
                    ifEnemySurvive();// 敌机是否存活
                    ifBossSurvive();// Boss是否存活
                }
                break;
            }
            case 82: {// R 发射清屏子弹
                for (int x = fighter.getX(); x > fighter.getX() - 4; x--) {
                    for (int y = 1; y < fighter.widthGetter() + 1; y++) {
                        bullets.add(new Bullet(x, y));
                    }
                }
                ifEnemySurvive();// 敌机是否存活
                ifBossSurvive();// Boss是否存活
                break;
            }
            case 27: {// ESC 退出程序
                System.out.println("游戏结束！");
                System.exit(0);
                break;
            }
        }
        ifSurvive(enemyFighters);// 飞机是否存活
        ifSurvive(bosses);
        fighter.drawer(fighter, bullets, enemyFighters, bosses); // 更新图像
    }

    public void pcOperate() {
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {// 每200时间更新一次子弹移动并自动发射子弹，添加敌机
            @Override
            public void run() {
                bullets.add(new Bullet(fighter.getX(), fighter.getY())); // 自动发射子弹
                enemyFighters.add(new EnemyFighter());// 自动添加敌机
                for (int i = 0; i < bullets.size(); i++) {
                    bullets.get(i).floatBullet(); // 子弹移动
                    if (bullets.get(i).getX() == -1) {
                        bullets.remove(bullets.get(i));// 移除出界子弹
                        if (i != 0)// 回正数组索引
                            i--;
                    }
                }
                ifEnemySurvive();// 敌机是否存活
                ifBossSurvive();// Boss是否存活
            }
        }, 0, 200);

        timer.scheduleAtFixedRate(new TimerTask() {// 每10000时间添加Boss
            @Override
            public void run() {
                bosses.add(new Boss());

            }
        }, 0, 10000);

        timer.scheduleAtFixedRate(new TimerTask() {// 每1000时间更新一次敌机运动
            @Override
            public void run() {
                for (int i = 0; i < enemyFighters.size(); i++) {
                    enemyFighters.get(i).enemyFighterMove(); // 敌机移动
                    if (enemyFighters.get(i).getX() > fighter.heightGetter()) {
                        enemyFighters.remove(enemyFighters.get(i));// 移除出界飞机
                        if (i != 0)// 回正数组索引
                            i--;
                    }
                }
                for (int i = 0; i < bosses.size(); i++) {
                    bosses.get(i).enemyFighterMove(); // 敌机移动
                    if (bosses.get(i).getX() > fighter.heightGetter()) {
                        bosses.remove(bosses.get(i));// 移除出界飞机
                        if (i != 0)// 回正数组索引
                            i--;
                    }
                }
                ifEnemySurvive();// 敌机是否存活
                ifSurvive(enemyFighters);// 飞机是否存活
                ifSurvive(bosses);// Boss是否存活
                fighter.drawer(fighter, bullets, enemyFighters, bosses);
            }
        }, 0, 1000);

        timer.scheduleAtFixedRate(new TimerTask() {// 每4000时间刷新super子弹
            @Override
            public void run() {
                fighter.setsuperBullet(true);
            }
        }, 0, 4000);

        timer.scheduleAtFixedRate(new TimerTask() {// 更新图像
            @Override
            public void run() {
                // fighter.drawer(fighter, bullets, enemyFighters, bosses);
            }
        }, 0, 2000);
    }

    /**
     * 判断飞机是否存活
     */
    public void ifSurvive(ArrayList<? extends EnemyFighter> enemyFighters) {
        for (int i = 0; i < enemyFighters.size(); i++) {
            if ((enemyFighters.get(i).getX() == fighter.getX() - 1
                    && enemyFighters.get(i).getY() == fighter.getY())
                    || (enemyFighters.get(i).getX() == fighter.getX()
                            && enemyFighters.get(i).getY() > fighter.getY() - 3
                            && enemyFighters.get(i).getY() < fighter.getY() + 3)) { // 飞机撞上敌机
                enemyFighters.remove(enemyFighters.get(i)); // 删除敌机
                fighter.createFighter(); // 刷新飞机位置
                fighter.setHP(fighter.getHP() - 1);// 减少生命值
                if (fighter.getHP() == 0) {
                    System.out.println("***飞机被摧毁，游戏结束！***");
                    System.exit(0);
                }
                break;
            }
        }
    }

    /**
     * 判断敌机是否存活
     */
    public void ifEnemySurvive() {
        for (int i = 0; i < bullets.size(); i++) {
            for (int j = 0; j < enemyFighters.size(); j++) {
                if (bullets.get(i).getX() == enemyFighters.get(j).getX()
                        && bullets.get(i).getY() == enemyFighters.get(j).getY()) {// 击中敌机
                    scoreUP();// 加分
                    bullets.remove(i);// 删除子弹
                    enemyFighters.remove(enemyFighters.get(j)); // 删除敌机
                    // 回正数组索引
                    if (i != 0)
                        i--;
                    if (j != 0)
                        j--;
                }
            }
        }
    }

    /**
     * 判断Boss是否存活
     */
    public void ifBossSurvive() {
        for (int i = 0; i < bullets.size(); i++) {
            for (int j = 0; j < bosses.size(); j++) {
                if (bullets.get(i).getX() == bosses.get(j).getX() && (bullets.get(i).getY() > bosses.get(j).getY() - 2
                        && bullets.get(i).getY() < bosses.get(j).getY() + 2)) {// 击中Boss
                    scoreUP();// 加分
                    bosses.get(j).lossHP();// Boss扣血
                    if (bosses.get(j).getHP() == 0) {
                        bosses.remove(j); // 删除Boss
                        if (j != 0) // 回正数组索引
                            j--;
                    }
                    bullets.remove(i);// 删除子弹
                    if (i != 0) // 回正数组索引
                        i--;
                }
            }
        }
    }

    public void scoreUP() {
        fighter.setScore(fighter.getScore() + 1);// 加分
        if (fighter.getScore() > 1995)
            fighter.win();// 胜利
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

}

********************************************************************
//mainFlyMe2TheMoon.java

package FlyMe2TheMoon4;

/**
 * main of FlyMe2TheMoon
 * 
 * @author xinyang Zhou
 * @version 4.0
 */
public class mainFlyMe2TheMoon {
    /**
     * main函数（主模块）
     * 
     * @param args A reference to a string array containing command-line arguments
     */
    public static void main(String[] args) {
        System.out.println("这里是打飞机小游戏~~");
        // 实例操作类
        Operate FlyMe2TheMoon = new Operate();

        // 飞机操纵台启动
        FlyMe2TheMoon.operateFighter();
        // 敌机子弹开始运动
        FlyMe2TheMoon.pcOperate();
    }
}